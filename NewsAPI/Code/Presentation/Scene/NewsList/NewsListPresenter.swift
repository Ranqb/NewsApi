//
//  NewsListPresenter.swift
//  NewsAPI
//
//  Created by Andrey Nedov on 12/08/2019.
//  Copyright (c) 2019 Andrey Nedov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListPresentationLogic
{
    func presentNews(response: NewsList.FetchNews.Response)
}

class NewsListPresenter: NewsListPresentationLogic
{
    weak var viewController: NewsListDisplayLogic?
    
    // MARK: DrinksListPresentationLogic

    func presentNews(response: NewsList.FetchNews.Response)
    {
        switch response.result {
        case .success(let news):
            handleSuccessFetchedNews(news, response.update)
        case .failure(let error):
            handleError(error)
        }
    }
    // MARK: Private Helpers
    
    private func handleSuccessFetchedNews(_ news: [ArticleModel]?, _ update: Bool) {
        guard let news = news else { return }
        var displayedNews: [DisplayedArticle] = []
        for article in news {
            let displayedArticle = DisplayedArticle(with: article)
            displayedNews.append(displayedArticle)
        }
        let viewModel = NewsList.FetchNews.ViewModel.Success(displayedNews: displayedNews)
        if update {
            viewController?.updateNews(viewModel: viewModel)
        }else{
            viewController?.displayNews(viewModel: viewModel)
        }
    }
    
    private func handleError(_ error: Error) {
        let errorViewModel = ErrorViewModel(error: error)
        let viewModel = NewsList.FetchNews.ViewModel.Failure(errorViewModel: errorViewModel)
        viewController?.displayError(viewModel: viewModel)
    }
}

