//
//  NewsListViewController.swift
//  NewsAPI
//
//  Created by Andrey Nedov on 12/08/2019.
//  Copyright (c) 2019 Andrey Nedov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListDisplayLogic: class
{
    func displayNews(viewModel: NewsList.FetchNews.ViewModel.Success)
    func updateNews(viewModel: NewsList.FetchNews.ViewModel.Success)
    func displayError(viewModel: NewsList.FetchNews.ViewModel.Failure)
}

class NewsListViewController: ViewController
{
    var interactor: NewsListBusinessLogic?
    var router: (NSObjectProtocol & NewsListRoutingLogic & NewsListDataPassing)?
    
    private var news: [DisplayedArticle] = []
    
    // MARK: IBOutlets
    
    @IBOutlet var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = NewsListInteractor()
        let presenter = NewsListPresenter()
        let router = NewsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.navigationItem.title = "Top news"
        view.backgroundColor = defaultBackgroundColor
        fetchNews(refresh: false)
        setupTableView()
        pullToRefresh()
    }
    
    // MARK: Private Helpers
    
    private func setupTableView() {
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(ArticleCell.self)
        tableView.tableFooterView = UIView(frame: .zero)
        tableView.backgroundColor = defaultBackgroundColor
    }
    
    // MARK: Logic
    
    func fetchNews(refresh flag: Bool)
    {
        if !flag {
            displayLoading()
        }
        let request = NewsList.FetchNews.Request(refresh: flag)
        interactor?.fetchNews(request: request)
    }
    
    //MARK: - Additional Methods
    
    func pullToRefresh(){
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(refreshProcess), for: UIControl.Event.valueChanged)
        tableView.refreshControl = refreshControl
        tableView.addSubview(refreshControl)
    }
    
    @objc func refreshProcess(){
        DispatchQueue.global().async {
            self.fetchNews(refresh: true)
        }
    }

}

// MARK: FavoriteDrinkListDisplayLogic
extension NewsListViewController: NewsListDisplayLogic {
    
    func displayNews(viewModel: NewsList.FetchNews.ViewModel.Success){
        displayContent()
        news = viewModel.displayedNews
        tableView.reloadData()
        tableView.refreshControl?.endRefreshing()
    }
    func updateNews(viewModel: NewsList.FetchNews.ViewModel.Success){
        news = viewModel.displayedNews
        RunLoop.current.perform(inModes: [.default]) {
            self.tableView.reloadData()
            self.tableView.refreshControl?.endRefreshing()
        }
    }
    func displayError(viewModel: NewsList.FetchNews.ViewModel.Failure){
        displayContent()
        display(errorViewModel: viewModel.errorViewModel)
    }
}

extension NewsListViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return news.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: ArticleCell = tableView.dequeue(for: indexPath)
        cell.configure(news[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let request = NewsList.SelectArticle.Request(article: news[indexPath.row])
        interactor?.selectArticle(request: request)
        router?.routeToDetails()
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
}

